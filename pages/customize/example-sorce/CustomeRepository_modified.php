<?php


namespace Eccube\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * CrudRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CrudRepository extends EntityRepository
{
    /**
     * getAllDataSortByUpdateDate
     * dtb_crudの値を全て返却、引数により更新日をソート
     *
     * @param string $order
     * @return array|bool
     */
    public function getAllDataSortByUpdateDate($order = 'asc') ★更新日付で昇順・降順でソートし全てのデーターを返却するメソッドを作成します。
    {
        $qb = $this->createQueryBuilder('dc'); ★クエリビルダーの取得

        $qb->select('dc') ★クエリ作成
            ->orderBy('dc.update_date', $order);

        $res = $qb->getQuery()->getResult(); ★一覧表示情報の取得

        return count($res) > 0 ? $res : false; ★取得情報の判定と対応値の返却
    }

    /**
     * save
     *
     * @param \Eccube\Entity\Crud $entity
     * @return bool
     */
    public function save(\Eccube\Entity\Crud $entity) ★引数のエンティティを保存するメソッド
    {
        $em = $this->getEntityManager(); ★エンティティマネージャーを取得

        try { ★リレーションをしていないため、トランザクションの必要性は低いがトランザクション定義
            $em->beginTransaction();
            $em->persist($entity);
            $em->flush($entity); ★エンティティの保存
            $em->commit();
        } catch (\Exception $e) {
            $em->rollback(); ★予想外のエラーが発生した際はロールバック

            return false;
        }

        return true;
    }
}
